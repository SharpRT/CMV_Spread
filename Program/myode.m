function dydt = myode(...
    t,N,nx,dx,x,model_isMutantSwitch,paramControlType,rhoRep,model_isFDDT,...
    sigma,omega,lambda_i,lambda_r,rho_i,rho_r,gamma_i,gamma_r,theta,zeta,p,alpha_var,r,K,m,D_m,D_zeta,...
    sigma_min,lambda_min,gamma_min,zeta_min,r_min,K_min,m_min,D_m_min,D_zeta_min,...
    omega_max,rho_max,theta_max,p_max,alpha_max,...
    controlType,controlPressure,min_on,max_on,lower_control_threshold,upper_control_threshold,spatialControlLoc...
)
    eps_lambda_vector = zeros(1,nx);
    eps_rho_vector = zeros(1,nx);
    eps_Dm_vector = zeros(1,nx);
    eps_plantRate_vector = zeros(1,nx);
    eps_alpha_vector = zeros(1,nx);
    eps_theta_vector = zeros(1,nx);
    eps_p_vector = zeros(1,nx);
    eps_zeta_vector = zeros(1,nx);
    eps_Dzeta_vector = zeros(1,nx);
    eps_gamma_vector = zeros(1,nx);
    eps_r_vector = zeros(1,nx);
    eps_K_vector = zeros(1,nx);
    eps_m_vector = zeros(1,nx);
    eps_omega_vector = zeros(1,nx);
    
    H_old = N((0*nx+1):(1*nx))';
    Ir_old = N((1*nx+1):(2*nx))';
    Ii_old = N((2*nx+1):(3*nx))';
    Zr_old = N((3*nx+1):(4*nx))';
    Zi_old = N((4*nx+1):(5*nx))';    
    
    eps_control_vector = control_vector(...
        t, nx, controlType, controlPressure, min_on, max_on,...
        lower_control_threshold, upper_control_threshold, Ii_old,...
        spatialControlLoc...
    );

    switch paramControlType %Set Control=0
        case 0 %NO_Control                      
        case 1 %beta_Controlled / lambda_Controlled
            eps_lambda_vector = eps_control_vector;
        case 2 %mu_Controlled / rho_Controlled
            eps_rho_vector = eps_control_vector;
        case 3 %D_Controlled
            eps_Dm_vector = eps_control_vector;  
        case 4 %plantRate_Controlled
            eps_plantRate_vector = eps_control_vector;
        case 6 %alpha_Controlled
            eps_alpha_vector = eps_control_vector;                   
        case 7 %theta_Controlled
            eps_theta_vector = eps_control_vector;
        case 8 %p_Controlled
            eps_p_vector = eps_control_vector;
        case 9 %zeta_Controlled
            eps_zeta_vector = eps_control_vector; 
        case 10 %Dzeta_Controlled
            eps_Dzeta_vector = eps_control_vector;
        case 11 %gamma_Controlled
            eps_gamma_vector = eps_control_vector;  
        case 12 %r_Controlled
            eps_r_vector = eps_control_vector;
        case 13 %K_Controlled
            eps_K_vector = eps_control_vector;
        case 14 %Dmigrate_Controlled
            eps_m_vector = eps_control_vector;
        case 15 %omega_Controlled
            eps_omega_vector = eps_control_vector; 
        otherwise
            error('Invalid paramControlType - terminating');
    end         

    sigma_C = sigma - (sigma - sigma_min) * eps_plantRate_vector;
    omega_C = omega + (omega_max - omega) * eps_omega_vector;
    
    lambda_i_C = lambda_i - (lambda_i - lambda_min) * eps_lambda_vector;
    lambda_r_C = lambda_r - (lambda_r - lambda_min) * eps_lambda_vector;
%     rho_i_C = rho_i + (rho_max - rho_i) * eps_rho_vector;
%     rho_r_C = rho_r + (rho_max - rho_r) * eps_rho_vector;
    rho_i_C = rho_i./(1-eps_rho_vector);
    rho_r_C = rho_r./(1-eps_rho_vector);
    gamma_i_C = gamma_i - (gamma_i - gamma_min) * eps_gamma_vector;
    gamma_r_C = gamma_r - (gamma_r - gamma_min) * eps_gamma_vector;

    theta_C = theta + (theta_max - theta) * eps_theta_vector;
    zeta_C = zeta - (zeta - zeta_min) * eps_zeta_vector;
    p_C = p + (p_max - p) * eps_p_vector;

    alpha_C = alpha_var + (alpha_max - alpha_var) * eps_alpha_vector;
    r_C = r - (r - r_min) * eps_r_vector;
    K_C = K - (K - K_min) * eps_K_vector;
    m_C = m - (m - m_min) * eps_m_vector;
    D_m_C = D_m - (D_m - D_m_min) * eps_Dm_vector;
    D_zeta_C = D_zeta - (D_zeta - D_zeta_min) * eps_Dzeta_vector;

    tau_C = 0;    
    
    P = @(aV,rV,KV) (rV-aV).*KV./rV;
            
    kernel_m = exp(-abs(x)*sqrt(2)./D_m_C)./(2*D_m_C/sqrt(2));
    auc = sum(kernel_m*dx);
    kernel_m = kernel_m/auc;

    kernel_zeta =  exp(-abs(x)*sqrt(2)./D_zeta_C)./(2*D_zeta_C/sqrt(2));
    auc = sum(kernel_zeta*dx);
    kernel_zeta = kernel_zeta/auc;    
    
    if zeta > 0 && theta < 1
        imported = @(N) conv(kernel_zeta*dx,N,'same');
    end
    immigrating = @(P) conv(kernel_m*dx,P,'same'); 

    if model_isMutantSwitch 
        if model_isFDDT
            dHdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*(rho_r_C.*Ir + rho_i_C.*Ii)) ...
                .* (theta_C + (1-theta_C).*(((1-zeta_C).*H./(H+(1-p_C).*(Ir+Ii)))+zeta_C.*imported_H./imported_all)) ...
                - omega_C.*H ...
                - (lambda_r_C.*Zr.*H)./(H+Ir+Ii) ...
                - (lambda_i_C.*Zi.*H)./(H+Ir+Ii);
            dIrdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*(rho_r_C.*Ir + rho_i_C.*Ii)) ...
                .*(1-theta_C).*(((1-zeta_C).*(1-p_C).*Ir./(H+(1-p_C).*(Ir+Ii)))+zeta_C.*(1-p_C).*imported_Ir./imported_all) ...
                + (lambda_r_C.*Zr.*H)./(H+Ir+Ii) ...
                - (omega_C+rho_r_C).*Ir;
            dIidt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*(rho_r_C.*Ir + rho_i_C.*Ii)) ...
                .*(1-theta_C).*(((1-zeta_C).*(1-p_C).*Ii./(H+(1-p_C).*(Ir+Ii)))+zeta_C.*(1-p_C).*imported_Ii./imported_all) ...
                + (lambda_i_C.*Zi.*H)./(H+Ir+Ii) ...
                - (omega_C+rho_i_C).*Ii;
            dZrdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                -(alpha_C+tau_C).*Zr ...
                + (gamma_r_C.*(P(alpha_C,r_C,K_C)-Zr-Zi).*Ir)./(H+Ir+Ii) ...
                + m_C.*(immigrating_Zr-Zr);
            dZidt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                -(alpha_C+tau_C).*Zi ...
                + (gamma_i_C.*(P(alpha_C,r_C,K_C)-Zr-Zi).*Ii)./(H+Ir+Ii) ...
                + m_C.*(immigrating_Zi-Zi);    
        else
            dHdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*(rho_r_C.*Ir + rho_i_C.*Ii)) ...
                .* (theta_C + (1-theta_C).*(((1-zeta_C).*H./(H+(1-p_C).*(Ir+Ii)))+zeta_C.*imported_H./imported_all)) ...
                - omega_C.*H ...
                - (lambda_r_C.*Zr.*H) ...
                - (lambda_i_C.*Zi.*H);
            dIrdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*(rho_r_C.*Ir + rho_i_C.*Ii)) ...
                .*(1-theta_C).*(((1-zeta_C).*(1-p_C).*Ir./(H+(1-p_C).*(Ir+Ii)))+zeta_C.*(1-p_C).*imported_Ir./imported_all) ...
                + (lambda_r_C.*Zr.*H) ...
                - (omega_C+rho_r_C).*Ir;
            dIidt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*(rho_r_C.*Ir + rho_i_C.*Ii)) ...
                .*(1-theta_C).*(((1-zeta_C).*(1-p_C).*Ii./(H+(1-p_C).*(Ir+Ii)))+zeta_C.*(1-p_C).*imported_Ii./imported_all) ...
                + (lambda_i_C.*Zi.*H) ...
                - (omega_C+rho_i_C).*Ii;
            dZrdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                -(alpha_C+tau_C).*Zr ...
                + (gamma_r_C.*(P(alpha_C,r_C,K_C)-Zr-Zi).*Ir) ...
                + m_C.*(immigrating_Zr-Zr);
            dZidt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                -(alpha_C+tau_C).*Zi ...
                + (gamma_i_C.*(P(alpha_C,r_C,K_C)-Zr-Zi).*Ii) ...
                + m_C.*(immigrating_Zi-Zi);    
        end
                
        input_impIr = imported(Ir_old);
        input_imiZr = immigrating(Zr_old);
    else
        if model_isFDDT
            dHdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*rho_i_C.*Ii) ...
                .* (theta_C + (1-theta_C).*(((1-zeta_C).*H./(H+(1-p_C).*Ii))+zeta_C.*imported_H./imported_all)) ...
                - omega_C.*H ...
                - (lambda_i_C.*Zi.*H)./(H+Ii);
            dIidt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*rho_i_C.*Ii) ...
                .*(1-theta_C).*(((1-zeta_C).*(1-p_C).*Ii./(H+(1-p_C).*Ii))+zeta_C.*(1-p_C).*imported_Ii./imported_all) ...
                + (lambda_i_C.*Zi.*H)./(H+Ii) ...
                - (omega_C+rho_i_C).*Ii;
            dZidt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                - (alpha_C+tau_C).*Zi ...
                + (gamma_i_C.*(P(alpha_C,r_C,K_C)-Zi).*Ii)./(H+Ii) ...
                + m_C.*(immigrating_Zi-Zi);             
        else
            dHdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*rho_i_C.*Ii) ...
                .* (theta_C + (1-theta_C).*(((1-zeta_C).*H./(H+(1-p_C).*Ii))+zeta_C.*imported_H./imported_all)) ...
                - omega_C.*H ...
                - (lambda_i_C.*Zi.*H);
            dIidt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                (sigma_C + rhoRep*rho_i_C.*Ii) ...
                .*(1-theta_C).*(((1-zeta_C).*(1-p_C).*Ii./(H+(1-p_C).*Ii))+zeta_C.*(1-p_C).*imported_Ii./imported_all) ...
                + (lambda_i_C.*Zi.*H) ...
                - (omega_C+rho_i_C).*Ii;
            dZidt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) ...
                - (alpha_C+tau_C).*Zi ...
                + (gamma_i_C.*(P(alpha_C,r_C,K_C)-Zi).*Ii) ...
                + m_C.*(immigrating_Zi-Zi);         
        end
        dIrdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) Ir_old;
        dZrdt = @(H,Ir,Ii,Zr,Zi,imported_H,imported_Ir,imported_Ii,imported_all,immigrating_Zr,immigrating_Zi) Zr_old;        
        
        input_impIr = 0;
        input_imiZr = 0;
    end
    
    input_impH = imported(H_old);
    input_impIi = imported(Ii_old);
    input_impAll = input_impH + (1-p_C).*(input_impIr + input_impIi);
    input_imiZi = immigrating(Zi_old);
    
    dydt = [
        dHdt(H_old,Ir_old,Ii_old,Zr_old,Zi_old,input_impH, input_impIr, input_impIi, input_impAll, input_imiZr, input_imiZi)';    
        dIrdt(H_old,Ir_old,Ii_old,Zr_old,Zi_old,input_impH, input_impIr, input_impIi, input_impAll, input_imiZr, input_imiZi)';
        dIidt(H_old,Ir_old,Ii_old,Zr_old,Zi_old,input_impH, input_impIr, input_impIi, input_impAll, input_imiZr, input_imiZi)';
        dZrdt(H_old,Ir_old,Ii_old,Zr_old,Zi_old,input_impH, input_impIr, input_impIi, input_impAll, input_imiZr, input_imiZi)';
        dZidt(H_old,Ir_old,Ii_old,Zr_old,Zi_old,input_impH, input_impIr, input_impIi, input_impAll, input_imiZr, input_imiZi)'
    ];
end